<?php

return <<<'VALUE'
"namespace IPS\\Theme;\nclass class_videos_front_global extends \\IPS\\Theme\\Template\n{\n\t\t\tfunction commentTableHeader( $comment, $video ) {\n\t\t$return = '';\n\t\t$return .= <<<CONTENT\n\n\r\n<div class='ipsDataList ipsAreaBackground_light ipsClearfix'>\r\n\t<div class='ipsDataItem'>\r\n\t\t<div class='ipsDataItem_generic ipsDataItem_size2'>\r\n\t\t\t\nCONTENT;\n\n$return .= \\IPS\\Theme::i()->getTemplate( \"global\", \"core\" )->thumbImage( \\IPS\\File::get( 'videos_Thumbs', $video->thumbnail )->url, $video->title, '', 'cSearchActivity_image', 'view_this', $video->url() );\n$return .= <<<CONTENT\n\r\n\t\t<\/div>\r\n\t\t<div class='ipsDataItem_main'>\r\n\t\t\t<h3 class='ipsType_sectionHead'><a href='\nCONTENT;\n$return .= htmlspecialchars( $video->url(), ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n' title='\nCONTENT;\n\n$sprintf = array($video->title); $return .= \\IPS\\Member::loggedIn()->language()->addToStack( htmlspecialchars( 'view_this_video', \\IPS\\HTMLENTITIES, 'UTF-8', FALSE ), FALSE, array( 'sprintf' => $sprintf ) );\n$return .= <<<CONTENT\n'>\nCONTENT;\n$return .= htmlspecialchars( $video->mapped('title'), ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n<\/a><\/h3>\r\n\t\t\t<p class='ipsType_normal ipsType_light ipsType_blendLinks ipsType_reset'>\nCONTENT;\n\n$return .= \\IPS\\Member::loggedIn()->language()->addToStack( htmlspecialchars( 'videos_in', \\IPS\\HTMLENTITIES, 'UTF-8', FALSE ), TRUE, array(  ) );\n$return .= <<<CONTENT\n <a href='\nCONTENT;\n$return .= htmlspecialchars( $video->container()->url(), ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n'>\nCONTENT;\n$return .= htmlspecialchars( $video->container()->_title, ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n<\/a><\/p>\r\n\t\t<\/div>\r\n\t<\/div>\r\n<\/div>\nCONTENT;\n\n\t\treturn $return;\n}\n\n\tfunction snippet( $activity, $type='activity' ) {\n\t\t$return = '';\n\t\t$return .= <<<CONTENT\n\n\n\nCONTENT;\n\nif ( $activity instanceof \\IPS\\videos\\Video\\Comment ):\n$return .= <<<CONTENT\n\n\t\nCONTENT;\n\n$item = $activity->item();\n$return .= <<<CONTENT\n\n\nCONTENT;\n\nelse:\n$return .= <<<CONTENT\n\n\t\nCONTENT;\n\n$item = $activity;\n$return .= <<<CONTENT\n\n\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n\n\n<div class='cSearchActivity_info ipsContained'>\n\t<div class='ipsColumns'>\n\t\t<div class='ipsColumn ipsColumn_narrow'>\n\t\t\nCONTENT;\n\n$return .= \\IPS\\Theme::i()->getTemplate( \"global\", \"core\" )->thumbImage( \\IPS\\File::get( 'videos_Thumbs', $item->thumbnail )->url, $item->title, '', 'cSearchActivity_image', 'view_this', $item->url() );\n$return .= <<<CONTENT\n\n\t\t<\/div>\n\t\t<div class='ipsColumn ipsColumn_fluid'>\n\t\t\t\nCONTENT;\n\nif ( $activity instanceof \\IPS\\videos\\Video\\Comment ):\n$return .= <<<CONTENT\n\n\t\t\t\t<div class='ipsType_medium ipsType_richText ipsContained ipsSpacer_bottom ipsSpacer_half' data-ipsTruncate data-ipsTruncate-size='3 lines' data-ipsTruncate-type='remove'>\n\t\t\t\t\t{$activity->truncated()}\n\t\t\t\t<\/div>\n\t\t\t\t<ul class='ipsList_inline ipsType_light'>\n\t\t\t\t\t\nCONTENT;\n\nif ( $type != 'search' and $activity instanceof \\IPS\\Content\\Reputation and \\IPS\\Settings::i()->reputation_enabled ):\n$return .= <<<CONTENT\n\n\t\t\t\t\t\t<li>\nCONTENT;\n\n$return .= \\IPS\\Theme::i()->getTemplate( \"global\", \"core\" )->reputationMini( $activity, '', NULL, TRUE );\n$return .= <<<CONTENT\n<\/li>\n\t\t\t\t\t\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n\n\t\t\t\t<\/ul>\n\t\t\t\nCONTENT;\n\nelse:\n$return .= <<<CONTENT\n\n\t\t\t\t\nCONTENT;\n\nif ( $type != 'search' ):\n$return .= <<<CONTENT\n<a href='\nCONTENT;\n$return .= htmlspecialchars( $item->url(), ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n' class='ipsType_normal ipsType_break'>\nCONTENT;\n$return .= htmlspecialchars( $item->mapped('title'), ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n<\/a>\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n\n\t\t\t\t<div class='ipsType_medium ipsType_richText ipsContained ipsSpacer_both ipsSpacer_half' data-ipsTruncate data-ipsTruncate-size='3 lines' data-ipsTruncate-type='remove'>\n\t\t\t\t\t{$item->truncated()}\n\t\t\t\t<\/div>\n\t\t\t\t<ul class='ipsList_inline ipsType_light'>\n\t\t\t\t\t<li>\nCONTENT;\n\n$pluralize = array( $item->views ); $return .= \\IPS\\Member::loggedIn()->language()->addToStack( htmlspecialchars( 'num_video_views', \\IPS\\HTMLENTITIES, 'UTF-8', FALSE ), FALSE, array( 'pluralize' => $pluralize ) );\n$return .= <<<CONTENT\n<\/li>\n\t\t\t\t\t\nCONTENT;\n\nif ( \\IPS\\Settings::i()->vs_enable_comments AND \\IPS\\Member::loggedIn()->group['g_vs_view_comments'] ):\n$return .= <<<CONTENT\n\n\t\t\t\t\t\t<li>\nCONTENT;\n\n$pluralize = array( $item->num_comments ); $return .= \\IPS\\Member::loggedIn()->language()->addToStack( htmlspecialchars( 'num_video_comments', \\IPS\\HTMLENTITIES, 'UTF-8', FALSE ), FALSE, array( 'pluralize' => $pluralize ) );\n$return .= <<<CONTENT\n<\/li>\n\t\t\t\t\t\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n\n\t\t\t\t\t\nCONTENT;\n\nif ( $type != 'search' and $item instanceof \\IPS\\Content\\Reputation and \\IPS\\Settings::i()->reputation_enabled ):\n$return .= <<<CONTENT\n\n\t\t\t\t\t\t<li>\nCONTENT;\n\n$return .= \\IPS\\Theme::i()->getTemplate( \"global\", \"core\" )->reputationMini( $item, '', NULL, TRUE );\n$return .= <<<CONTENT\n<\/li>\n\t\t\t\t\t\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n\n\t\t\t\t<\/ul>\n\t\t\t\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n\n\t\t<\/div>\n\t<\/div>\n<\/div>\nCONTENT;\n\n\t\treturn $return;\n}\n\n\tfunction thumb( $video, $size='' ) {\n\t\t$return = '';\n\t\t$return .= <<<CONTENT\n\n\nCONTENT;\n\n$thumbDims = explode( ',', \\IPS\\Settings::i()->vs_standard_thumbnail );\n$return .= <<<CONTENT\n \n<a href='\nCONTENT;\n$return .= htmlspecialchars( $video->url(), ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n'>\n\nCONTENT;\n\nif ( $video->thumbnail ):\n$return .= <<<CONTENT\n\n\t<div class='ipsThumb \nCONTENT;\n\nif ( $size ):\n$return .= <<<CONTENT\nipsThumb_\nCONTENT;\n$return .= htmlspecialchars( $size, ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n ipsThumb_bg' style='\nCONTENT;\n\nif ( isset( $thumbDims[0] ) AND !$size ):\n$return .= <<<CONTENT\nwidth: 100%; height: \nCONTENT;\n\nif ( isset( $thumbDims[1] ) AND $thumbDims[1] ):\n$return .= <<<CONTENT\n\nCONTENT;\n$return .= htmlspecialchars( $thumbDims[1], ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n\nCONTENT;\n\nelse:\n$return .= <<<CONTENT\n140\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\npx;\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n background-image: url( \nCONTENT;\n\n$return .= \\IPS\\File::get( \"videos_Thumbs\", $video->thumbnail )->url;\n$return .= <<<CONTENT\n );'>\n\t\t<img src='\nCONTENT;\n\n$return .= \\IPS\\File::get( \"videos_Thumbs\", $video->thumbnail )->url;\n$return .= <<<CONTENT\n' alt='' class=''>\n\t<\/div>                        \n\nCONTENT;\n\nelse:\n$return .= <<<CONTENT\n\n    <div class='ipsNoThumb ipsThumb ipsThumb_\nCONTENT;\n$return .= htmlspecialchars( $size, ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n' \nCONTENT;\n\nif ( isset( $thumbDims[0] ) AND !$size ):\n$return .= <<<CONTENT\nstyle='\nCONTENT;\n\nif ( isset( $thumbDims[0] ) AND !$size ):\n$return .= <<<CONTENT\nwidth: 100%; height: \nCONTENT;\n\nif ( isset( $thumbDims[1] ) AND $thumbDims[1] ):\n$return .= <<<CONTENT\n\nCONTENT;\n$return .= htmlspecialchars( $thumbDims[1], ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n\nCONTENT;\n\nelse:\n$return .= <<<CONTENT\n140\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\npx;\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n'\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n><\/div>\n\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n\n<\/a>\nCONTENT;\n\n\t\treturn $return;\n}\n\n\tfunction video( $video ) {\n\t\t$return = '';\n\t\t$return .= <<<CONTENT\n\n\nCONTENT;\n\nif ( $video->video_type == 'media_upload' OR $video->video_type == 'media_upload_url' ):\n$return .= <<<CONTENT\n\n    <video id=\"video\nCONTENT;\n$return .= htmlspecialchars( $video->tid, ENT_QUOTES | \\IPS\\HTMLENTITIES, 'UTF-8', FALSE );\n$return .= <<<CONTENT\n\" width=\"100%\" preload controls>\n    \t<source src=\"\nCONTENT;\n\n$return .= \\IPS\\File::get( \"videos_Videos\", $video->video_data )->url;\n$return .= <<<CONTENT\n\" \/>\n    <\/video>        \n\nCONTENT;\n\nelse:\n$return .= <<<CONTENT\n \n    {$video->embed}\n\nCONTENT;\n\nendif;\n$return .= <<<CONTENT\n\nCONTENT;\n\n\t\treturn $return;\n}}"
VALUE;
